1.@SpringBootApplication注解依赖
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
        </dependency>
cas:CompareAndSwap



设计模式：
    单例模式：
    建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示
    观察者模式：     java.util.Observer
                    java.util.Observable
    代理模式：由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介
        主要优点有：
            代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；
            代理对象可以扩展目标对象的功能；
            代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；
        主要缺点是：
            在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；
            增加了系统的复杂度

        静态代理：编译期间手动生成代理对象
        JDK动态代理：在程序运行时JVM才为被代理对象生成代理对象
            限制：被代理的对象必须实现一个或多个接口，若想代理没有实现接口的类，就需要使用Cglib实现
        Cglib动态代理（子类代理）：在内存中构建一个子类对象从而实现对目标对象功能的扩展





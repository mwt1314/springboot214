
1.字符类
[...]	匹配方括号中任意一个字符，可以使用连字符"-"匹配指定范围内的任意字符
		var regExp = /[12345]/;(含有1到5任意一个字符就匹配)
		var regExp = /[1-5]/;
		[a-d]
		[A-Z]

[^...]	匹配方括号中字符序列未包含的任意字符，可以使用连字符"-"匹配
		var regExp = /[^12345]/;(含有一个不在1到5之间的字符就匹配)
		var regExp = /[^1-5]/;

.		匹配除了回车(换行符)之外的任意字符
		var regExp = /./;(含有不是回车的字符就匹配)

\d		匹配任意一个数字字符，相当于[0-9]
		var regExp = /\d/;(含有任意一个数字就匹配)
		var regExp = /\d\d/;(含有任意两个连续数字就匹配)

\D		匹配任意非数字字符，相当于[^0-9]

\s		匹配任意空白字符，如空格、制表符、换行符等，相当于[\t\n\x0B\f\r]

\S		匹配任意非空白符，相当于[^\t\n\x0B\f\r]

\w		匹配任何英文字母、数字字符以及下划线，相当于[a-zA-Z0-9_]

\W		匹配任何非英文字母、数字字符以及下划线

2.量词
?		匹配前一项0次或1次
		var regExp = /1a?/;(出现1了,a没有出现或者出现1次就匹配，不管后面还有没有再出现)


+		匹配前一项1次或多次，但至少出现1次

*		匹配前一项0次或者多次，也就是任意次

{n}		匹配前一项恰好n次，其中n为非负整数
		var regExp = /1a{3}/;(1aaaaaa匹配)

{n,}	匹配前一项至少n次

{n,m}	匹配前一项至少n次，但不能超过m次，其中n、m是非负整数，并且n<=m
		s在使用{n,m}时，数字与逗号之间不能有空格符

3.指定匹配位置
^		匹配字符串的行开头，^必须出现在指定字符串的最前面才起作用

$		匹配字符串的行结尾，$必须出现在指定字符串的最后面才起作用。

\b		匹配单词的边界		/e\b/匹配"I love seek"中love的e，不匹配seek中的e
							/\bb/匹配"book"中的b

\B		匹配单词的非边界	/e\B/匹配"I love seek"中seek的e，不匹配love中的e

4.使用选择匹配符
    正则表达式的选择匹配符只有一个"|"，使用"|"可以匹配指定的多个选项中的任意一项。
	var regExp = /^a|^b/;(以a或者b开头)

5.分组
    分组就是使用小括号()将多个单独的字符或字符类组合成子表达式，以便可以像处理一个
独立的单元那样

6.要匹配特殊字符，必须在它们前面加反斜杠字符 (\)转义
  特殊字符：[ \ ? + * ^ { | () $ .
例子: ***
/^\*{3}$/

7.修饰符
i 	不区分大小写	/^[a-d]$/i
g 	查找所有匹配而不是在找到第一个匹配后停止
m 	执行多行匹配，不设置这个标志^只能匹配字符串的开头，$只能匹配字符串的结尾；
    如果设置了这个标志，那么^可以匹配多行字符串每一行的开头结尾
	var regExp = /^ab$/m;
补充：多个修饰符可以同时使用
      /^[a-d]$/ig


